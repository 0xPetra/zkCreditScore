//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//
//test script using solidity logic
import {
  Halo2Lib,
  AxiomData,
  CircuitValue,
  CircuitValue256
} from "@axiom-crypto/core/halo2-js";
const defaultInputs = {
  userAddress: "0x897dDbe14c9C7736EbfDC58461355697FbF70048",
  startBlock: 9173677,
  endBlock: 9730000,
  blockInterval: 1000
};
type CircuitInputType = typeof defaultInputs;
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  userAddress: CircuitValue;
  startBlock: CircuitValue;
  endBlock: CircuitValue;
  blockInterval: CircuitValue;
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  { userAddress, startBlock, endBlock, blockInterval }: CircuitValueInputs
) => {
  const { constant, add, sub, mul, and, or, div } = halo2Lib;
  const { getAccount, addToCallback } = axiomData;

  let totalBalance = constant(0);
  let firstActiveBlock = constant(0);
  let isActive = false;
  const periods = div(sub(endBlock, startBlock), blockInterval);

  // Iterate over blocks to calculate average balance and find account age
  for (let i = constant(0); i < periods; i = add(i, constant(1))) {
    const blockNumber = sub(endBlock, mul(i, blockInterval));
    let account = getAccount(blockNumber, userAddress);

    // Calculate total balance
    totalBalance = add(totalBalance, account.balance().toCircuitValue());

    // Check for the first active block
    if (!isActive && account.nonce().toCircuitValue() > constant(0)) {
      firstActiveBlock = blockNumber;
      isActive = true;
    }
  }

  // Calculate average balance
  let averageBalance = div(totalBalance, periods);

  // Add results to the callback
  addToCallback(userAddress);
  addToCallback(averageBalance);
  addToCallback(firstActiveBlock);
};
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2
};
const vk = [
  2,
  13,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  22,
  53,
  175,
  191,
  189,
  44,
  47,
  125,
  102,
  223,
  68,
  183,
  53,
  24,
  221,
  245,
  11,
  40,
  210,
  84,
  147,
  34,
  241,
  111,
  251,
  44,
  176,
  97,
  40,
  23,
  111,
  5,
  236,
  172,
  54,
  30,
  205,
  68,
  139,
  37,
  34,
  255,
  110,
  222,
  63,
  213,
  167,
  105,
  46,
  125,
  148,
  2,
  105,
  228,
  6,
  175,
  114,
  9,
  31,
  238,
  182,
  133,
  168,
  45,
  69,
  140,
  45,
  34,
  167,
  32,
  17,
  149,
  190,
  4,
  251,
  127,
  93,
  142,
  109,
  202,
  24,
  196,
  187,
  181,
  28,
  178,
  225,
  113,
  59,
  34,
  254,
  130,
  104,
  28,
  143,
  19,
  100,
  251,
  207,
  20,
  183,
  204,
  247,
  126,
  195,
  27,
  221,
  20,
  208,
  132,
  243,
  65,
  153,
  119,
  94,
  94,
  252,
  158,
  238,
  93,
  208,
  237,
  144,
  59,
  149,
  176,
  93,
  0,
  217,
  113,
  126,
  63,
  151,
  245,
  114,
  176,
  22,
  21,
  184,
  65,
  15,
  144,
  105,
  62,
  235,
  160,
  51,
  118,
  33,
  190,
  50,
  176,
  42,
  216,
  48,
  33,
  215,
  203,
  27,
  10,
  255,
  184,
  24,
  12,
  14,
  254,
  162,
  167,
  5,
  200,
  155,
  4,
  147,
  82,
  195,
  3,
  15,
  86,
  99,
  138,
  126,
  151,
  112,
  64,
  169,
  15,
  154,
  43,
  80,
  208,
  232,
  42,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  62,
  177,
  81,
  214,
  203,
  210,
  1,
  184,
  209,
  78,
  199,
  243,
  166,
  100,
  26,
  167,
  34,
  172,
  249,
  39,
  124,
  60,
  212,
  44,
  203,
  230,
  138,
  166,
  240,
  100,
  6,
  44,
  189,
  73,
  117,
  43,
  140,
  20,
  68,
  217,
  213,
  151,
  21,
  113,
  145,
  116,
  79,
  67,
  212,
  206,
  101,
  107,
  19,
  151,
  183,
  157,
  11,
  214,
  5,
  149,
  80,
  175,
  129,
  32,
  24,
  43,
  17,
  12,
  115,
  62,
  195,
  228,
  144,
  172,
  166,
  159,
  97,
  135,
  138,
  167,
  228,
  211,
  127,
  94,
  155,
  46,
  94,
  223,
  237,
  74,
  44,
  2,
  242,
  11,
  89,
  12,
  163,
  68,
  0,
  114,
  101,
  205,
  145,
  135,
  154,
  241,
  125,
  86,
  157,
  167,
  195,
  252,
  77,
  93,
  135,
  142,
  196,
  108,
  31,
  69,
  249,
  218,
  77,
  147,
  9,
  4,
  121,
  35,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  132,
  100,
  116,
  45,
  55,
  8,
  172,
  66,
  149,
  0,
  166,
  140,
  136,
  147,
  255,
  86,
  246,
  19,
  55,
  200,
  55,
  113,
  3,
  31,
  37,
  38,
  135,
  120,
  33,
  166,
  221,
  36,
  242,
  48,
  24,
  96,
  244,
  79,
  178,
  185,
  102,
  37,
  122,
  71,
  124,
  167,
  225,
  40,
  81,
  202,
  58,
  74,
  116,
  157,
  61,
  225,
  134,
  120,
  115,
  193,
  207,
  109,
  176,
  19,
  132,
  45,
  242,
  95,
  103,
  73,
  117,
  253,
  79,
  74,
  105,
  149,
  89,
  29,
  153,
  183,
  155,
  211,
  252,
  197,
  98,
  242,
  208,
  96,
  199,
  215,
  47,
  140,
  76,
  137,
  225,
  15,
  57,
  108,
  231,
  95,
  74,
  211,
  238,
  159,
  190,
  24,
  112,
  103,
  51,
  226,
  140,
  67,
  198,
  184,
  77,
  71,
  195,
  153,
  33,
  204,
  140,
  137,
  165,
  228,
  61,
  39,
  185,
  0
];
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk
});
